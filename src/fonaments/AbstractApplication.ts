import express from "express";
import * as fs from 'fs';
import Query from "../database/Query";
import { RequestInputs } from "./http/RequestInputs";

declare module 'express-serve-static-core' {
  interface Request {
      dbCon: Query,
      inputs: RequestInputs
  }
}

export abstract class AbstractApplication {
  protected _express: express.Application;
  protected _config: any;
  protected _path: string;
  
  constructor(path: string = process.cwd()) {
    try {
      this._path = path;
      console.log('Loading application from ' + this._path);
      this._express = express();
      this._config = require('../config/config');
    } catch (e) {
      console.error('Aplication startup failed: ' + e.message);
      process.exit(e);
    }
  }

  get express(): express.Application {
    return this._express;
  }

  get config(): any {
    return this._config;
  }

  get path(): string {
    return this._path;
  }

  protected async bootstrap() {
    await this.generateDirectories();
    await this.registerMiddlewares('before');
    await this.registerRoutes();
    await this.registerMiddlewares('after');
  }

  protected abstract registerRoutes();

  /**
   * Register all middlewares
   */
  protected async registerMiddlewares(group: 'before' | 'after'): Promise<void> {
    let middlewares: Array<any> = [];

    if (group === 'before') {
      middlewares = this.beforeMiddlewares();
      for(let i = 0; i < middlewares.length; i++) {
        await (new middlewares[i]()).register(this);
      }
    }

    if (group === 'after') {
      middlewares = this.afterMiddlewares();
      for(let i = 0; i < middlewares.length; i++) {
        await (new middlewares[i]()).register(this);
      }
    }
  }

  /**
   * Returns an array of Middleware classes to be registered before the routes handlers
   */
  protected beforeMiddlewares(): Array<any> {
    return [];
  }

  /**
   * Returns an array of Middleware classes to be registered after the routes handlers
   */
  protected afterMiddlewares(): Array<any> {
    return [];
  }

  /**
   * Creates autogenerated directories
   */
  private async generateDirectories() {
    try {
      fs.mkdirSync('./logs');
    } catch (e) {
      if (e.code !== 'EEXIST') {
        console.error("Could not create the logs directory. ERROR: ", e);
        process.exit(1);
      }
    }

    /**
     * Create the data directories, just in case them aren't there.
     */
    try {
      fs.mkdirSync('./DATA');
      fs.mkdirSync(this._config.get('policy').data_dir);
      fs.mkdirSync(this._config.get('pki').data_dir);
    } catch (e) {
      if (e.code !== 'EEXIST') {
        console.error("Could not create the data directory. ERROR: ", e);
        process.exit(1);
      }
    }
  }
}