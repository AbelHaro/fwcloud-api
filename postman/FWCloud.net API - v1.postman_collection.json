{
	"info": {
		"_postman_id": "147af2b8-0059-47e0-bc9d-6ab0146f7182",
		"name": "FWCloud.net API - v1",
		"description": "Postman collection for the FWCloud.net API version 1.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "Bad customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"const response = pm.response.json();",
									"",
									"pm.test(\"Error response\", function () {",
									"    let err = {",
									"        \"fwcErr\": 1001,",
									"        \"msg\": \"Bad username or password\"",
									"    }",
									"    pm.expect(response).to.eql(err);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customer\": 2,\n    \"username\": \"fwcadmin\",\n    \"password\": \"fwcadmin\"\n}"
						},
						"url": {
							"raw": "{{apiURL}}/user/login",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"user",
								"login"
							]
						},
						"description": "Description of the bad customer request."
					},
					"response": []
				},
				{
					"name": "Bad username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"const response = pm.response.json();",
									"",
									"pm.test(\"Error response\", function () {",
									"    let err = {",
									"        \"fwcErr\": 1001,",
									"        \"msg\": \"Bad username or password\"",
									"    }",
									"    pm.expect(response).to.eql(err);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customer\": 1,\n    \"username\": \"badUser\",\n    \"password\": \"fwcadmin\"\n}"
						},
						"url": {
							"raw": "{{apiURL}}/user/login",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bad password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"const response = pm.response.json();",
									"",
									"pm.test(\"Error response\", function () {",
									"    let err = {",
									"        \"fwcErr\": 1001,",
									"        \"msg\": \"Bad username or password\"",
									"    }",
									"    pm.expect(response).to.eql(err);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customer\": 1,\n    \"username\": \"fwcadmin\",\n    \"password\": \"badPass\"\n}"
						},
						"url": {
							"raw": "{{apiURL}}/user/login",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bad customer, username and password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"const response = pm.response.json();",
									"",
									"pm.test(\"Error response\", function () {",
									"    let err = {",
									"        \"fwcErr\": 1001,",
									"        \"msg\": \"Bad username or password\"",
									"    }",
									"    pm.expect(response).to.eql(err);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customer\": 2,\n    \"username\": \"badUser\",\n    \"password\": \"badPass\"\n}"
						},
						"url": {
							"raw": "{{apiURL}}/user/login",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login ok (clear some environment variables)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const response = pm.response.json();",
									"",
									"pm.test(\"Response data\", function () {",
									"    pm.expect(response).to.eql({\"user\":1, \"role\":1});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8a2d37bb-09c7-4bc2-abb4-3369effc1f64",
								"exec": [
									"pm.environment.unset(\"fwcloud\");",
									"pm.environment.unset(\"firewall\");",
									"pm.environment.unset(\"cluster\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Origin",
								"type": "text",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customer\": 1,\n    \"username\": \"fwcadmin\",\n    \"password\": \"fwcadmin\"\n}"
						},
						"url": {
							"raw": "{{apiURL}}/user/login",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change pass of the logged user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"if (pm.response.code === 403) {",
									"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
									"    if (fwc_confirm_token) {",
									"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
									"        postman.setNextRequest(pm.info.requestId);",
									"        return;",
									"    }",
									"}",
									"",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"    ",
									"pm.globals.unset(\"fwc_confirm_token\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8a2d37bb-09c7-4bc2-abb4-3369effc1f64",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Origin",
								"type": "text",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-FWC-Confirm-Token",
								"value": "{{fwc_confirm_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"password\": \"mynewsecret\"\n}"
						},
						"url": {
							"raw": "{{apiURL}}/user/changepass",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"user",
								"changepass"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"if (pm.response.code === 403) {",
									"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
									"    if (fwc_confirm_token) {",
									"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
									"        postman.setNextRequest(pm.info.requestId);",
									"        return;",
									"    }",
									"}",
									"",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Origin",
								"type": "text",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-FWC-Confirm-token",
								"type": "text",
								"value": "{{fwc_confirm_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{apiURL}}/user/logout",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"user",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with the old password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Error response\", function () {",
									"    const response = pm.response.json();",
									"    const err = {",
									"        \"fwcErr\": 1001,",
									"        \"msg\": \"Bad username or password\"",
									"    }",
									"    pm.expect(response).to.eql(err);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8a2d37bb-09c7-4bc2-abb4-3369effc1f64",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Origin",
								"type": "text",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customer\": 1,\n    \"username\": \"fwcadmin\",\n    \"password\": \"fwcadmin\"\n}"
						},
						"url": {
							"raw": "{{apiURL}}/user/login",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with the new password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const response = pm.response.json();",
									"",
									"pm.test(\"Response data\", function () {",
									"    pm.expect(response).to.eql({\"user\":1, \"role\":1});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8a2d37bb-09c7-4bc2-abb4-3369effc1f64",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Origin",
								"type": "text",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customer\": 1,\n    \"username\": \"fwcadmin\",\n    \"password\": \"mynewsecret\"\n}"
						},
						"url": {
							"raw": "{{apiURL}}/user/login",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Restore the original password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"if (pm.response.code === 403) {",
									"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
									"    if (fwc_confirm_token) {",
									"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
									"        postman.setNextRequest(pm.info.requestId);",
									"        return;",
									"    }",
									"}",
									"",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"    ",
									"pm.globals.unset(\"fwc_confirm_token\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8a2d37bb-09c7-4bc2-abb4-3369effc1f64",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Origin",
								"type": "text",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-FWC-Confirm-Token",
								"type": "text",
								"value": "{{fwc_confirm_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"password\": \"fwcadmin\"\n}"
						},
						"url": {
							"raw": "{{apiURL}}/user/changepass",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"user",
								"changepass"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login ok",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const response = pm.response.json();",
									"",
									"pm.test(\"Response data\", function () {",
									"    pm.expect(response).to.eql({\"user\":1, \"role\":1});",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8a2d37bb-09c7-4bc2-abb4-3369effc1f64",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Origin",
								"type": "text",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customer\": 1,\n    \"username\": \"fwcadmin\",\n    \"password\": \"fwcadmin\"\n}"
						},
						"url": {
							"raw": "{{apiURL}}/user/login",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Customer",
			"item": [
				{
					"name": "New customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"if (pm.response.code === 403) {",
									"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
									"    if (fwc_confirm_token) {",
									"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
									"        postman.setNextRequest(pm.info.requestId);",
									"        return;",
									"    }",
									"}",
									"",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"    ",
									"pm.globals.unset(\"fwc_confirm_token\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-FWC-Confirm-Token",
								"value": "{{fwc_confirm_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customer\": 2,\n    \"name\": \"FWCloud.net\",\n    \"addr\": \"C/Carrasca, 7 - 03590 Altea (Alicante) - Spain\",\n    \"phone\": \"+34 966 446 046\",\n    \"email\": \"info@fwcloud.net\",\n    \"web\": \"https://fwcloud.net\"\n}"
						},
						"url": {
							"raw": "{{apiURL}}/customer",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"customer"
							]
						}
					},
					"response": []
				},
				{
					"name": "New customer (existes same id)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"if (pm.response.code === 403) {",
									"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
									"    if (fwc_confirm_token) {",
									"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
									"        postman.setNextRequest(pm.info.requestId);",
									"        return;",
									"    }",
									"}",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error response\", function () {",
									"    const response = pm.response.json();",
									"    const err ={",
									"        \"fwcErr\": 1004,",
									"        \"msg\": \"Already exists with the same id\"",
									"    }",
									"    pm.expect(response).to.eql(err);",
									"});",
									"",
									"pm.globals.unset(\"fwc_confirm_token\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-FWC-Confirm-Token",
								"type": "text",
								"value": "{{fwc_confirm_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customer\": 2,\n    \"name\": \"FWCloud.net\",\n    \"addr\": \"C/Carrasca, 7 - 03590 Altea (Alicante) - Spain\",\n    \"phone\": \"+34 966 446 046\",\n    \"email\": \"info@fwcloud.net\",\n    \"web\": \"https://fwcloud.net\"\n}"
						},
						"url": {
							"raw": "{{apiURL}}/customer",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"customer"
							]
						}
					},
					"response": []
				},
				{
					"name": "New customer (existes same name)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"if (pm.response.code === 403) {",
									"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
									"    if (fwc_confirm_token) {",
									"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
									"        postman.setNextRequest(pm.info.requestId);",
									"        return;",
									"    }",
									"}",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error response\", function () {",
									"    const response = pm.response.json();",
									"    const err ={",
									"        \"fwcErr\": 1005,",
									"        \"msg\": \"Already exists with the same name\"",
									"    }",
									"    pm.expect(response).to.eql(err);",
									"});",
									"",
									"pm.globals.unset(\"fwc_confirm_token\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-FWC-Confirm-Token",
								"type": "text",
								"value": "{{fwc_confirm_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"FWCloud.net\",\n    \"addr\": \"C/Carrasca, 7 - 03590 Altea (Alicante) - Spain\",\n    \"phone\": \"+34 966 446 046\",\n    \"email\": \"info@fwcloud.net\",\n    \"web\": \"https://fwcloud.net\"\n}"
						},
						"url": {
							"raw": "{{apiURL}}/customer",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"customer"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Data received\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.id).to.eql(2);",
									"    pm.expect(response.name).to.eql(\"FWCloud.net\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customer\": 2\n}"
						},
						"url": {
							"raw": "{{apiURL}}/customer/get",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"customer",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get customer (not found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error response\", function () {",
									"    const response = pm.response.json();",
									"    const err = {",
									"        \"fwcErr\": 1002,",
									"        \"msg\": \"Not found\"",
									"    }",
									"    pm.expect(response).to.eql(err);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customer\": 3\n}"
						},
						"url": {
							"raw": "{{apiURL}}/customer/get",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"customer",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get customers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Data received\", function () {",
									"    // Check that the customer FWCloud.net exists in the returned array.",
									"    const response = pm.response.json();",
									"    let search_customer;",
									"    for (let customer of response) {",
									"        if (customer.name === \"FWCloud.net\")",
									"            search_customer = customer; ",
									"    }",
									"    pm.expect(search_customer.id).to.eql(2);",
									"    pm.expect(search_customer.name).to.eql(\"FWCloud.net\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{apiURL}}/customer/get",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"customer",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"if (pm.response.code === 403) {",
									"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
									"    if (fwc_confirm_token) {",
									"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
									"        postman.setNextRequest(pm.info.requestId);",
									"        return;",
									"    }",
									"}",
									"",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.globals.unset(\"fwc_confirm_token\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-FWC-Confirm-Token",
								"type": "text",
								"value": "{{fwc_confirm_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customer\": 2,\n    \"name\": \"FWCloud.net\",\n    \"addr\": \"C/Carrasca, 7 - 03590 Altea (Alicante) - Spain\",\n    \"phone\": \"+34 966 446 046\",\n    \"email\": \"info@fwcloud.net\",\n    \"web\": \"https://www.fwcloud.net\"\n}"
						},
						"url": {
							"raw": "{{apiURL}}/customer",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"customer"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update customer (verify updated data)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Data received\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.id).to.eql(2);",
									"    pm.expect(response.name).to.eql(\"FWCloud.net\");",
									"    pm.expect(response.web).to.eql(\"https://www.fwcloud.net\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customer\": 2\n}"
						},
						"url": {
							"raw": "{{apiURL}}/customer/get",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"customer",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update customer (not found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"if (pm.response.code === 403) {",
									"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
									"    if (fwc_confirm_token) {",
									"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
									"        postman.setNextRequest(pm.info.requestId);",
									"        return;",
									"    }",
									"}",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error response\", function () {",
									"    const response = pm.response.json();",
									"    const err = {",
									"        \"fwcErr\": 1002,",
									"        \"msg\": \"Not found\"",
									"    }",
									"    pm.expect(response).to.eql(err);",
									"});",
									"",
									"",
									"pm.globals.unset(\"fwc_confirm_token\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-FWC-Confirm-Token",
								"type": "text",
								"value": "{{fwc_confirm_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customer\": 3,\n    \"name\": \"FWCloud.net\",\n    \"addr\": \"C/Carrasca, 7 - 03590 Altea (Alicante) - Spain\",\n    \"phone\": \"+34 966 446 046\",\n    \"email\": \"info@fwcloud.net\",\n    \"web\": \"https://www.fwcloud.net\"\n}"
						},
						"url": {
							"raw": "{{apiURL}}/customer",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"customer"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update customer (exists same name)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"if (pm.response.code === 403) {",
									"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
									"    if (fwc_confirm_token) {",
									"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
									"        postman.setNextRequest(pm.info.requestId);",
									"        return;",
									"    }",
									"}",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error response\", function () {",
									"    const response = pm.response.json();",
									"    const err ={",
									"        \"fwcErr\": 1005,",
									"        \"msg\": \"Already exists with the same name\"",
									"    }",
									"    pm.expect(response).to.eql(err);",
									"});",
									"",
									"",
									"pm.globals.unset(\"fwc_confirm_token\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-FWC-Confirm-Token",
								"type": "text",
								"value": "{{fwc_confirm_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customer\": 2,\n    \"name\": \"SOLTECSIS, S.L.\",\n    \"addr\": \"C/Carrasca, 7 - 03590 Altea (Alicante) - Spain\",\n    \"phone\": \"+34 966 446 046\",\n    \"email\": \"info@fwcloud.net\",\n    \"web\": \"https://www.fwcloud.net\"\n}"
						},
						"url": {
							"raw": "{{apiURL}}/customer",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"customer"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"if (pm.response.code === 403) {",
									"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
									"    if (fwc_confirm_token) {",
									"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
									"        postman.setNextRequest(pm.info.requestId);",
									"        return;",
									"    }",
									"}",
									"",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.globals.unset(\"fwc_confirm_token\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-FWC-Confirm-Token",
								"type": "text",
								"value": "{{fwc_confirm_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customer\": 2\n}"
						},
						"url": {
							"raw": "{{apiURL}}/customer/del",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"customer",
								"del"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete customer (not found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"if (pm.response.code === 403) {",
									"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
									"    if (fwc_confirm_token) {",
									"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
									"        postman.setNextRequest(pm.info.requestId);",
									"        return;",
									"    }",
									"}",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error response\", function () {",
									"    const response = pm.response.json();",
									"    const err = {",
									"        \"fwcErr\": 1002,",
									"        \"msg\": \"Not found\"",
									"    }",
									"    pm.expect(response).to.eql(err);",
									"});",
									"",
									"pm.globals.unset(\"fwc_confirm_token\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-FWC-Confirm-Token",
								"type": "text",
								"value": "{{fwc_confirm_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customer\": 3\n}"
						},
						"url": {
							"raw": "{{apiURL}}/customer/del",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"customer",
								"del"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete customer (restricted: last customer)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"if (pm.response.code === 403) {",
									"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
									"    if (fwc_confirm_token) {",
									"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
									"        postman.setNextRequest(pm.info.requestId);",
									"        return;",
									"    }",
									"}",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Restrictions\", function () {",
									"    const response = pm.response.json();",
									"    const err = {",
									"        \"result\": true,",
									"        \"restrictions\": {",
									"            \"CustomerHasUsers\": true",
									"        }",
									"    }",
									"    pm.expect(response).to.eql(err);",
									"});",
									"",
									"",
									"pm.globals.unset(\"fwc_confirm_token\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-FWC-Confirm-Token",
								"type": "text",
								"value": "{{fwc_confirm_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customer\": 1\n}"
						},
						"url": {
							"raw": "{{apiURL}}/customer/del",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"customer",
								"del"
							]
						}
					},
					"response": []
				},
				{
					"name": "New customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"if (pm.response.code === 403) {",
									"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
									"    if (fwc_confirm_token) {",
									"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
									"        postman.setNextRequest(pm.info.requestId);",
									"        return;",
									"    }",
									"}",
									"",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"    ",
									"pm.globals.unset(\"fwc_confirm_token\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-FWC-Confirm-Token",
								"type": "text",
								"value": "{{fwc_confirm_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customer\": 2,\n    \"name\": \"FWCloud.net\",\n    \"addr\": \"C/Carrasca, 7 - 03590 Altea (Alicante) - Spain\",\n    \"phone\": \"+34 966 446 046\",\n    \"email\": \"info@fwcloud.net\",\n    \"web\": \"https://fwcloud.net\"\n}"
						},
						"url": {
							"raw": "{{apiURL}}/customer",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"customer"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "New user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"if (pm.response.code === 403) {",
									"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
									"    if (fwc_confirm_token) {",
									"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
									"        postman.setNextRequest(pm.info.requestId);",
									"        return;",
									"    }",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Data received\", function () {",
									"    const response = pm.response.json();",
									"    const data = {",
									"        \"user\": 2",
									"    }",
									"    pm.expect(response).to.eql(data);",
									"});",
									"",
									"    ",
									"pm.globals.unset(\"fwc_confirm_token\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-FWC-Confirm-Token",
								"type": "text",
								"value": "{{fwc_confirm_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customer\": 2,\n    \"name\": \"My Personal Name\",\n    \"email\": \"info@fwcloud.net\",\n    \"username\": \"fwcusr\",\n    \"password\": \"mysecret\",\n    \"enabled\": 1,\n    \"role\": 1,\n    \"allowed_from\": \"10.99.4.10,192.168.1.1\"\n}"
						},
						"url": {
							"raw": "{{apiURL}}/user",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "New user (customer not found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"if (pm.response.code === 403) {",
									"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
									"    if (fwc_confirm_token) {",
									"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
									"        postman.setNextRequest(pm.info.requestId);",
									"        return;",
									"    }",
									"}",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error response\", function () {",
									"    const response = pm.response.json();",
									"    const err ={",
									"         \"fwcErr\": 1002,",
									"        \"msg\": \"Not found\"",
									"    }",
									"    pm.expect(response).to.eql(err);",
									"});",
									"",
									"pm.globals.unset(\"fwc_confirm_token\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-FWC-Confirm-Token",
								"type": "text",
								"value": "{{fwc_confirm_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customer\": 3,\n    \"name\": \"My Personal Name\",\n    \"email\": \"info@fwcloud.net\",\n    \"username\": \"fwcusr\",\n    \"password\": \"mysecret\",\n    \"enabled\": 1,\n    \"role\": 1,\n    \"allowed_from\": \"10.99.4.10,192.168.1.1\"\n}"
						},
						"url": {
							"raw": "{{apiURL}}/user",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "New user (already exists)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"if (pm.response.code === 403) {",
									"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
									"    if (fwc_confirm_token) {",
									"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
									"        postman.setNextRequest(pm.info.requestId);",
									"        return;",
									"    }",
									"}",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error response\", function () {",
									"    const response = pm.response.json();",
									"    const err ={",
									"        \"fwcErr\": 1003,",
									"        \"msg\": \"Already exists\"",
									"    }",
									"    pm.expect(response).to.eql(err);",
									"});",
									"",
									"pm.globals.unset(\"fwc_confirm_token\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-FWC-Confirm-Token",
								"type": "text",
								"value": "{{fwc_confirm_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customer\": 2,\n    \"name\": \"My Personal Name\",\n    \"email\": \"info@fwcloud.net\",\n    \"username\": \"fwcusr\",\n    \"password\": \"mysecret\",\n    \"enabled\": 1,\n    \"role\": 1,\n    \"allowed_from\": \"10.99.4.10,192.168.1.1\"\n}"
						},
						"url": {
							"raw": "{{apiURL}}/user",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Data received\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.id).to.eql(2);",
									"    pm.expect(response.username).to.eql(\"fwcusr\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customer\": 2,\n    \"user\": 2\n}"
						},
						"url": {
							"raw": "{{apiURL}}/user/get",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"user",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Data received\", function () {",
									"    // Check that the customer FWCloud.net exists in the returned array.",
									"    const response = pm.response.json();",
									"    let search_user;",
									"    for (let user of response) {",
									"        if (user.name === \"My Personal Name\")",
									"            search_user = user; ",
									"    }",
									"    pm.expect(search_user.id).to.eql(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customer\": 2\n}"
						},
						"url": {
							"raw": "{{apiURL}}/user/get",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"user",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user (not found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error response\", function () {",
									"    const response = pm.response.json();",
									"    const err = {",
									"        \"fwcErr\": 1002,",
									"        \"msg\": \"Not found\"",
									"    }",
									"    pm.expect(response).to.eql(err);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customer\": 2,\n    \"user\": 1\n}"
						},
						"url": {
							"raw": "{{apiURL}}/user/get",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"user",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"if (pm.response.code === 403) {",
									"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
									"    if (fwc_confirm_token) {",
									"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
									"        postman.setNextRequest(pm.info.requestId);",
									"        return;",
									"    }",
									"}",
									"",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.globals.unset(\"fwc_confirm_token\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-FWC-Confirm-Token",
								"type": "text",
								"value": "{{fwc_confirm_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customer\": 2,\n    \"user\": 2,\n    \"name\": \"My Personal Name\",\n    \"email\": \"info@fwcloud.net\",\n    \"username\": \"fwcusr\",\n    \"password\": \"mysecret\",\n    \"enabled\": 1,\n    \"role\": 1,\n    \"allowed_from\": \"10.9.8.7\"\n}"
						},
						"url": {
							"raw": "{{apiURL}}/user",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user (verify updated data)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Data received\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.id).to.eql(2);",
									"    pm.expect(response.username).to.eql(\"fwcusr\");",
									"    pm.expect(response.allowed_from).to.eql(\"10.9.8.7\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customer\": 2,\n    \"user\": 2\n}"
						},
						"url": {
							"raw": "{{apiURL}}/user/get",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"user",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user (not found)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"if (pm.response.code === 403) {",
									"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
									"    if (fwc_confirm_token) {",
									"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
									"        postman.setNextRequest(pm.info.requestId);",
									"        return;",
									"    }",
									"}",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error response\", function () {",
									"    const response = pm.response.json();",
									"    const err = {",
									"        \"fwcErr\": 1002,",
									"        \"msg\": \"Not found\"",
									"    }",
									"    pm.expect(response).to.eql(err);",
									"});",
									"",
									"pm.globals.unset(\"fwc_confirm_token\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-FWC-Confirm-Token",
								"type": "text",
								"value": "{{fwc_confirm_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customer\": 2,\n    \"user\": 3\n}"
						},
						"url": {
							"raw": "{{apiURL}}/user/del",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"user",
								"del"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"if (pm.response.code === 403) {",
									"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
									"    if (fwc_confirm_token) {",
									"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
									"        postman.setNextRequest(pm.info.requestId);",
									"        return;",
									"    }",
									"}",
									"",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.globals.unset(\"fwc_confirm_token\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-FWC-Confirm-Token",
								"type": "text",
								"value": "{{fwc_confirm_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customer\": 2,\n    \"user\": 2\n}"
						},
						"url": {
							"raw": "{{apiURL}}/user/del",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"user",
								"del"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user (restricted: last admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"if (pm.response.code === 403) {",
									"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
									"    if (fwc_confirm_token) {",
									"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
									"        postman.setNextRequest(pm.info.requestId);",
									"        return;",
									"    }",
									"}",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Restrictions\", function () {",
									"    const response = pm.response.json();",
									"    const err = {",
									"        \"result\": true,",
									"        \"restrictions\": {",
									"            \"LastAdminUser\": true",
									"        }",
									"    }",
									"    pm.expect(response).to.eql(err);",
									"});",
									"",
									"",
									"pm.globals.unset(\"fwc_confirm_token\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-FWC-Confirm-Token",
								"type": "text",
								"value": "{{fwc_confirm_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customer\": 1,\n    \"user\": 1\n}"
						},
						"url": {
							"raw": "{{apiURL}}/user/del",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"user",
								"del"
							]
						}
					},
					"response": []
				},
				{
					"name": "New user with admin role",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"if (pm.response.code === 403) {",
									"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
									"    if (fwc_confirm_token) {",
									"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
									"        postman.setNextRequest(pm.info.requestId);",
									"        return;",
									"    }",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Data received\", function () {",
									"    const response = pm.response.json();",
									"    const data = {",
									"        \"user\": 3",
									"    }",
									"    pm.expect(response).to.eql(data);",
									"});",
									"",
									"    ",
									"pm.globals.unset(\"fwc_confirm_token\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-FWC-Confirm-Token",
								"type": "text",
								"value": "{{fwc_confirm_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customer\": 2,\n    \"name\": \"Test user with admin role\",\n    \"email\": \"info@fwcloud.net\",\n    \"username\": \"admin01\",\n    \"password\": \"myadminusersecret\",\n    \"enabled\": 1,\n    \"role\": 1,\n    \"allowed_from\": \"\"\n}"
						},
						"url": {
							"raw": "{{apiURL}}/user",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "New user with manager role",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"if (pm.response.code === 403) {",
									"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
									"    if (fwc_confirm_token) {",
									"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
									"        postman.setNextRequest(pm.info.requestId);",
									"        return;",
									"    }",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Data received\", function () {",
									"    const response = pm.response.json();",
									"    const data = {",
									"        \"user\": 4",
									"    }",
									"    pm.expect(response).to.eql(data);",
									"});",
									"",
									"    ",
									"pm.globals.unset(\"fwc_confirm_token\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-FWC-Confirm-Token",
								"type": "text",
								"value": "{{fwc_confirm_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customer\": 2,\n    \"name\": \"Test user with manager role\",\n    \"email\": \"info@fwcloud.net\",\n    \"username\": \"manager01\",\n    \"password\": \"mymanagerusersecret\",\n    \"enabled\": 1,\n    \"role\": 2,\n    \"allowed_from\": \"\"\n}"
						},
						"url": {
							"raw": "{{apiURL}}/user",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "FWCloud",
			"item": [
				{
					"name": "FWCloud operation",
					"item": [
						{
							"name": "Create 5 fwclouds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94225473-5132-4f19-8dc8-5810e0468252",
										"exec": [
											"if (pm.response.code === 403) {",
											"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
											"    if (fwc_confirm_token) {",
											"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"}",
											"",
											"var fwclouds = pm.environment.get(\"fwclouds\");",
											"if (fwclouds && fwclouds.length>0) {",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    var counter = pm.environment.get(\"counter\");",
											"    pm.test(\"Data received\", function () {",
											"        const response = pm.response.json();",
											"        pm.expect(response.insertId).to.eql(counter);",
											"        counter++;",
											"        pm.environment.set(\"counter\",counter);",
											"    });",
											"    ",
											"    pm.globals.unset(\"fwc_confirm_token\");",
											"",
											"    postman.setNextRequest(pm.info.requestId);",
											"} else {",
											"    pm.environment.unset(\"fwclouds\");",
											"    pm.environment.unset(\"counter\");",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
										"exec": [
											"var fwclouds = pm.environment.get(\"fwclouds\");",
											"if (!fwclouds) fwclouds = [\"\",\"FWCloud-01\",\"\",\"FWCloud-02\",\"\",\"FWCloud-03\",\"\",\"FWCloud-04\",\"\",\"FWCloud-05\"];",
											"pm.environment.set(\"fwcloud_name\",fwclouds.shift());",
											"pm.environment.set(\"fwclouds\",fwclouds);",
											"",
											"var counter = pm.environment.get(\"counter\");",
											"if (!counter) {",
											"    counter = 1;",
											"    pm.environment.set(\"counter\",counter);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": "{{Origin}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-FWC-Confirm-Token",
										"type": "text",
										"value": "{{fwc_confirm_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{fwcloud_name}}\",\n    \"image\": \"\",\n    \"comment\": \"\"\n}"
								},
								"url": {
									"raw": "{{apiURL}}/fwcloud",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"fwcloud"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get fwcloud",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94225473-5132-4f19-8dc8-5810e0468252",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data received\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.id).to.eql(pm.environment.get(\"fwcloud\"));",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2739a22e-a16b-4484-b8c9-1e94e9125458",
										"exec": [
											"pm.environment.set(\"fwcloud\",_.random(1, 5));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Origin",
										"value": "{{Origin}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fwcloud\": {{fwcloud}}\n}"
								},
								"url": {
									"raw": "{{apiURL}}/fwcloud/get",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"fwcloud",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get fwclouds",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94225473-5132-4f19-8dc8-5810e0468252",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"let id = 1;",
											"const response = pm.response.json();",
											"for (let fwcloud of response) {",
											"    //console.log(fwcloud);",
											"    pm.test(\"FWCloud-0\"+id, function () {",
											"        //console.log(fwcloud);",
											"        //console.log(id);",
											"        pm.expect(fwcloud.id).to.eql(id);",
											"        pm.expect(fwcloud.name).to.eql(\"FWCloud-0\"+id);",
											"    });",
											"    id++;",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2739a22e-a16b-4484-b8c9-1e94e9125458",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Origin",
										"value": "{{Origin}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{apiURL}}/fwcloud/all/get",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"fwcloud",
										"all",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update fwcloud and init the working fwcloud environment variable",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94225473-5132-4f19-8dc8-5810e0468252",
										"exec": [
											"if (pm.response.code === 403) {",
											"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
											"    if (fwc_confirm_token) {",
											"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"}",
											"",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.globals.unset(\"fwc_confirm_token\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
										"exec": [
											"// Create on enviroment variable with a random fwdloud id.",
											"pm.environment.set(\"fwcloud\",_.random(1, 5));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Origin",
										"value": "{{Origin}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-FWC-Confirm-Token",
										"type": "text",
										"value": "{{fwc_confirm_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"name\": \"FWCloud-0{{fwcloud}} (WORKING)\",\n    \"image\": \"\",\n    \"comment\": \"Comment for the updated fwcloud.\"\n}"
								},
								"url": {
									"raw": "{{apiURL}}/fwcloud",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"fwcloud"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update fwcloud (verify updated data)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94225473-5132-4f19-8dc8-5810e0468252",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data received\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.id).to.eql(pm.environment.get(\"fwcloud\"));",
											"    pm.expect(response.name).to.eql(\"FWCloud-0\"+pm.environment.get(\"fwcloud\")+\" (WORKING)\");",
											"    pm.expect(response.comment).to.eql(\"Comment for the updated fwcloud.\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Origin",
										"value": "{{Origin}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fwcloud\": {{fwcloud}}\n}"
								},
								"url": {
									"raw": "{{apiURL}}/fwcloud/get",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"fwcloud",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete empty fwcloud",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94225473-5132-4f19-8dc8-5810e0468252",
										"exec": [
											"if (pm.response.code === 403) {",
											"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
											"    if (fwc_confirm_token) {",
											"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"}",
											"",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.environment.unset(\"fwcloud_delete\");",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "edcc9763-03fc-4318-82fb-76b08a8e8c26",
										"exec": [
											"if (!pm.environment.get(\"fwcloud_Delete\")) {",
											"    while (1) {",
											"        var fwcloud_delete = _.random(1, 5);",
											"        if (fwcloud_delete != pm.environment.get(\"fwcloud\")) {",
											"           pm.environment.set(\"fwcloud_delete\",fwcloud_delete);",
											"           break;",
											"        }",
											"    }",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Origin",
										"value": "{{Origin}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-FWC-Confirm-Token",
										"type": "text",
										"value": "{{fwc_confirm_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fwcloud\": {{fwcloud_delete}}\n}"
								},
								"url": {
									"raw": "{{apiURL}}/fwcloud/del",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"fwcloud",
										"del"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete fwcloud (not exists)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94225473-5132-4f19-8dc8-5810e0468252",
										"exec": [
											"if (pm.response.code === 403) {",
											"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
											"    if (fwc_confirm_token) {",
											"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"}",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error response\", function () {",
											"    const response = pm.response.json();",
											"    const err =  {",
											"        \"fwcErr\": 7000,",
											"        \"msg\": \"FWCloud access not allowed\"",
											"    }",
											"    pm.expect(response).to.eql(err);",
											"});",
											"",
											"pm.globals.unset(\"fwc_confirm_token\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "edcc9763-03fc-4318-82fb-76b08a8e8c26",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Origin",
										"value": "{{Origin}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-FWC-Confirm-Token",
										"type": "text",
										"value": "{{fwc_confirm_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fwcloud\": 1000\n}"
								},
								"url": {
									"raw": "{{apiURL}}/fwcloud/del",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"fwcloud",
										"del"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Users with manager role can not operate over fwclouds",
					"item": [
						{
							"name": "Logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94225473-5132-4f19-8dc8-5810e0468252",
										"exec": [
											"if (pm.response.code === 403) {",
											"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
											"    if (fwc_confirm_token) {",
											"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"}",
											"",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"type": "text",
										"value": "{{Origin}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-FWC-Confirm-token",
										"type": "text",
										"value": "{{fwc_confirm_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{apiURL}}/user/logout",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"user",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login with manager user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94225473-5132-4f19-8dc8-5810e0468252",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test(\"Response data\", function () {",
											"    pm.expect(response).to.eql({\"user\":4, \"role\":2});",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8a2d37bb-09c7-4bc2-abb4-3369effc1f64",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"type": "text",
										"value": "{{Origin}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"customer\": 2,\n    \"username\": \"manager01\",\n    \"password\": \"mymanagerusersecret\"\n}"
								},
								"url": {
									"raw": "{{apiURL}}/user/login",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create fwcloud (not admin user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94225473-5132-4f19-8dc8-5810e0468252",
										"exec": [
											"if (pm.response.code === 403) {",
											"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
											"    if (fwc_confirm_token) {",
											"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"}",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error response\", function () {",
											"    const response = pm.response.json();",
											"    const err = {",
											"        \"fwcErr\": 1008,",
											"        \"msg\": \"You are not an admin user\"",
											"    }",
											"    pm.expect(response).to.eql(err);",
											"});",
											"",
											"pm.globals.unset(\"fwc_confirm_token\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": "{{Origin}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-FWC-Confirm-Token",
										"type": "text",
										"value": "{{fwc_confirm_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"TEST FWCloud\",\n    \"image\": \"\",\n    \"comment\": \"\"\n}"
								},
								"url": {
									"raw": "{{apiURL}}/fwcloud",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"fwcloud"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update fwcloud (not admin user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94225473-5132-4f19-8dc8-5810e0468252",
										"exec": [
											"if (pm.response.code === 403) {",
											"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
											"    if (fwc_confirm_token) {",
											"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"}",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error response\", function () {",
											"    const response = pm.response.json();",
											"    const err =  {",
											"        \"fwcErr\": 7000,",
											"        \"msg\": \"FWCloud access not allowed\"",
											"    }",
											"    pm.expect(response).to.eql(err);",
											"});",
											"",
											"pm.globals.unset(\"fwc_confirm_token\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Origin",
										"value": "{{Origin}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-FWC-Confirm-Token",
										"value": "{{fwc_confirm_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"name\": \"NEW NAME\",\n    \"image\": \"\",\n    \"comment\": \"\"\n}"
								},
								"url": {
									"raw": "{{apiURL}}/fwcloud",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"fwcloud"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete fwcloud (not admin user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94225473-5132-4f19-8dc8-5810e0468252",
										"exec": [
											"if (pm.response.code === 403) {",
											"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
											"    if (fwc_confirm_token) {",
											"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"}",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error response\", function () {",
											"    const response = pm.response.json();",
											"    const err =  {",
											"        \"fwcErr\": 7000,",
											"        \"msg\": \"FWCloud access not allowed\"",
											"    }",
											"    pm.expect(response).to.eql(err);",
											"});",
											"",
											"pm.globals.unset(\"fwc_confirm_token\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "edcc9763-03fc-4318-82fb-76b08a8e8c26",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Origin",
										"value": "{{Origin}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-FWC-Confirm-Token",
										"type": "text",
										"value": "{{fwc_confirm_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fwcloud\": {{fwcloud}}\n}"
								},
								"url": {
									"raw": "{{apiURL}}/fwcloud/del",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"fwcloud",
										"del"
									]
								}
							},
							"response": []
						},
						{
							"name": "Logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94225473-5132-4f19-8dc8-5810e0468252",
										"exec": [
											"if (pm.response.code === 403) {",
											"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
											"    if (fwc_confirm_token) {",
											"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"}",
											"",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"type": "text",
										"value": "{{Origin}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-FWC-Confirm-token",
										"type": "text",
										"value": "{{fwc_confirm_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{apiURL}}/user/logout",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"user",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login with the fwcadmin user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94225473-5132-4f19-8dc8-5810e0468252",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test(\"Response data\", function () {",
											"    pm.expect(response).to.eql({\"user\":1, \"role\":1});",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8a2d37bb-09c7-4bc2-abb4-3369effc1f64",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"type": "text",
										"value": "{{Origin}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"customer\": 1,\n    \"username\": \"fwcadmin\",\n    \"password\": \"fwcadmin\"\n}"
								},
								"url": {
									"raw": "{{apiURL}}/user/login",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ecabde5f-8cc5-4c18-a50f-ee8be37b8aa4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9ebf2e20-0c2a-4c0d-9859-126f38d8fa59",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Firewall",
			"item": [
				{
					"name": "Get 'FIREWALLS' node_id for the working fwcloud",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Data received\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.fwcloud).to.eql(pm.environment.get(\"fwcloud\"));",
									"    pm.expect(response.text).to.eql(\"FIREWALLS\");",
									"    pm.expect(response.node_type).to.eql(\"FDF\");",
									"    ",
									"    if (response.id) pm.environment.set(\"node_id\", response.id); ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2739a22e-a16b-4484-b8c9-1e94e9125458",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fwcloud\": {{fwcloud}}\n}"
						},
						"url": {
							"raw": "{{apiURL}}/tree/firewalls/get",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"tree",
								"firewalls",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create 5 firewalls in the current fwcloud",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"if (pm.response.code === 403) {",
									"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
									"    if (fwc_confirm_token) {",
									"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
									"        postman.setNextRequest(pm.info.requestId);",
									"        return;",
									"    }",
									"}",
									"",
									"var firewalls = pm.environment.get(\"firewalls\");",
									"if (firewalls && firewalls.length>0) {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    var counter = pm.environment.get(\"counter\");",
									"    pm.test(\"Data received\", function () {",
									"        const response = pm.response.json();",
									"        pm.expect(response.insertId).to.eql(counter);",
									"        counter++;",
									"        pm.environment.set(\"counter\",counter);",
									"    });",
									"    ",
									"    pm.globals.unset(\"fwc_confirm_token\");",
									"",
									"    postman.setNextRequest(pm.info.requestId);",
									"} else {",
									"    pm.environment.unset(\"firewalls\");",
									"    pm.environment.unset(\"counter\");",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
								"exec": [
									"var firewalls = pm.environment.get(\"firewalls\");",
									"if (!firewalls) firewalls = [\"\",\"Firewall-01\",\"\",\"Firewall-02\",\"\",\"Firewall-03\",\"\",\"Firewall-04\",\"\",\"Firewall-05\"];",
									"pm.environment.set(\"firewall_name\",firewalls.shift());",
									"pm.environment.set(\"firewalls\",firewalls);",
									"",
									"var counter = pm.environment.get(\"counter\");",
									"if (!counter) {",
									"    counter = 1;",
									"    pm.environment.set(\"counter\",counter);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-FWC-Confirm-Token",
								"type": "text",
								"value": "{{fwc_confirm_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"name\": \"{{firewall_name}}\",\n    \"save_user_pass\": 0,\n    \"install_port\": 22,\n    \"fwmaster\": 0,\n    \"options\": 3,\n    \"node_id\": {{node_id}}\n}"
						},
						"url": {
							"raw": "{{apiURL}}/firewall",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"firewall"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get firewall",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c7423f3-efcb-41b6-83d6-9755b6f756aa",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Data received\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.id).to.eql(pm.environment.get(\"firewall\"));",
									"    pm.expect(response.fwcloud).to.eql(parseInt(pm.environment.get(\"fwcloud\")));",
									"    pm.expect(response.name).to.eql(\"Firewall-0\"+pm.environment.get(\"firewall\"));",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b900a928-50b6-47c8-a16f-0a8a759c4cca",
								"exec": [
									"pm.environment.set(\"firewall\",_.random(1, 5));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"firewall\": {{firewall}}\n}"
						},
						"url": {
							"raw": "{{apiURL}}/firewall/get",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"firewall",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get firewalls",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const response = pm.response.json();",
									"if (pm.response.to.have.status(200)) {",
									"    let id = 1;",
									"    for (let firewall of response) {",
									"        //console.log(firewall);",
									"        pm.test(\"Firewall-0\"+id, function () {",
									"            //console.log(firewall);",
									"            //console.log(id);",
									"            pm.expect(firewall.id).to.eql(id);",
									"            pm.expect(firewall.fwcloud).to.eql(parseInt(pm.environment.get(\"fwcloud\")));",
									"            pm.expect(firewall.name).to.eql(\"Firewall-0\"+id);",
									"        });",
									"        id++;",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2739a22e-a16b-4484-b8c9-1e94e9125458",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"fwcloud\": {{fwcloud}}\n}"
						},
						"url": {
							"raw": "{{apiURL}}/firewall/cloud/get",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"firewall",
								"cloud",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update firewall",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"if (pm.response.code === 403) {",
									"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
									"    if (fwc_confirm_token) {",
									"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
									"        postman.setNextRequest(pm.info.requestId);",
									"        return;",
									"    }",
									"}",
									"",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.globals.unset(\"fwc_confirm_token\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-FWC-Confirm-Token",
								"type": "text",
								"value": "{{fwc_confirm_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"firewall\": {{firewall}},\n    \"name\": \"FireWall-0{{firewall}} (WORKING)\",\n    \"comment\": \"Comment for the updated firewall.\",\n    \"save_user_pass\": 0,\n    \"install_port\": 22,\n    \"fwmaster\": 0,\n    \"options\": 3\n}"
						},
						"url": {
							"raw": "{{apiURL}}/firewall",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"firewall"
							]
						}
					},
					"response": []
				},
				{
					"name": "Clone firewall",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"if (pm.response.code === 403) {",
									"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
									"    if (fwc_confirm_token) {",
									"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
									"        postman.setNextRequest(pm.info.requestId);",
									"        return;",
									"    }",
									"}",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.environment.set(\"cloned_firewall\", response.insertId);",
									"});",
									"",
									"pm.globals.unset(\"fwc_confirm_token\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-FWC-Confirm-Token",
								"type": "text",
								"value": "{{fwc_confirm_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"firewall\": {{firewall}},\n    \"name\": \"FireWall-CLONE\",\n    \"comment\": \"Comment for the cloned firewall.\",\n    \"node_id\": {{node_id}}\n}"
						},
						"url": {
							"raw": "{{apiURL}}/firewall/clone",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"firewall",
								"clone"
							]
						}
					},
					"response": []
				},
				{
					"name": "Clone firewall (fwcloud not exists)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"if (pm.response.code === 403) {",
									"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
									"    if (fwc_confirm_token) {",
									"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
									"        postman.setNextRequest(pm.info.requestId);",
									"        return;",
									"    }",
									"}",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error response\", function () {",
									"    const response = pm.response.json();",
									"    const err =  {",
									"        \"fwcErr\": 7000,",
									"        \"msg\": \"FWCloud access not allowed\"",
									"    }",
									"    pm.expect(response).to.eql(err);",
									"});",
									"",
									"pm.globals.unset(\"fwc_confirm_token\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-FWC-Confirm-Token",
								"type": "text",
								"value": "{{fwc_confirm_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fwcloud\": 1000,\n    \"firewall\": {{firewall}},\n    \"name\": \"FireWall-UPDATED\",\n    \"comment\": \"Comment for the updated firewall.\",\n    \"save_user_pass\": 0,\n    \"install_port\": 22,\n    \"fwmaster\": 0,\n    \"options\": 3\n}"
						},
						"url": {
							"raw": "{{apiURL}}/firewall",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"firewall"
							]
						}
					},
					"response": []
				},
				{
					"name": "Clone firewall (firewall not exists)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"if (pm.response.code === 403) {",
									"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
									"    if (fwc_confirm_token) {",
									"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
									"        postman.setNextRequest(pm.info.requestId);",
									"        return;",
									"    }",
									"}",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error response\", function () {",
									"    const response = pm.response.json();",
									"    const err =  {",
									"        \"fwcErr\": 7001,",
									"        \"msg\": \"Firewall access not allowed\"",
									"    }",
									"    pm.expect(response).to.eql(err);",
									"});",
									"",
									"pm.globals.unset(\"fwc_confirm_token\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-FWC-Confirm-Token",
								"type": "text",
								"value": "{{fwc_confirm_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"firewall\": 57,\n    \"name\": \"FireWall-UPDATED\",\n    \"comment\": \"Comment for the updated firewall.\",\n    \"save_user_pass\": 0,\n    \"install_port\": 22,\n    \"fwmaster\": 0,\n    \"options\": 3\n}"
						},
						"url": {
							"raw": "{{apiURL}}/firewall",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"firewall"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete firewall",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"if (pm.response.code === 403) {",
									"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
									"    if (fwc_confirm_token) {",
									"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
									"        postman.setNextRequest(pm.info.requestId);",
									"        return;",
									"    }",
									"}",
									"",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"    pm.environment.unset(\"cloned_firewall\");",
									"});",
									"",
									"pm.globals.unset(\"fwc_confirm_token\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-FWC-Confirm-Token",
								"type": "text",
								"value": "{{fwc_confirm_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"firewall\": {{cloned_firewall}}\n}"
						},
						"url": {
							"raw": "{{apiURL}}/firewall/del",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"firewall",
								"del"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete firewall (fwcloud not exists)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"if (pm.response.code === 403) {",
									"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
									"    if (fwc_confirm_token) {",
									"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
									"        postman.setNextRequest(pm.info.requestId);",
									"        return;",
									"    }",
									"}",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error response\", function () {",
									"    const response = pm.response.json();",
									"    const err =  {",
									"        \"fwcErr\": 7000,",
									"        \"msg\": \"FWCloud access not allowed\"",
									"    }",
									"    pm.expect(response).to.eql(err);",
									"});",
									"",
									"pm.globals.unset(\"fwc_confirm_token\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-FWC-Confirm-Token",
								"type": "text",
								"value": "{{fwc_confirm_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fwcloud\": 1000,\n    \"firewall\": {{firewall}}\n}"
						},
						"url": {
							"raw": "{{apiURL}}/firewall/del",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"firewall",
								"del"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete firewall (firewall not exists)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"if (pm.response.code === 403) {",
									"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
									"    if (fwc_confirm_token) {",
									"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
									"        postman.setNextRequest(pm.info.requestId);",
									"        return;",
									"    }",
									"}",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error response\", function () {",
									"    const response = pm.response.json();",
									"    const err =  {",
									"        \"fwcErr\": 7001,",
									"        \"msg\": \"Firewall access not allowed\"",
									"    }",
									"    pm.expect(response).to.eql(err);",
									"});",
									"",
									"pm.globals.unset(\"fwc_confirm_token\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-FWC-Confirm-Token",
								"type": "text",
								"value": "{{fwc_confirm_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"firewall\": 1000\n}"
						},
						"url": {
							"raw": "{{apiURL}}/firewall/del",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"firewall",
								"del"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cluster",
			"item": [
				{
					"name": "Get 'FIREWALLS' node_id for the working fwcloud",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Data received\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.fwcloud).to.eql(parseInt(pm.environment.get(\"fwcloud\")));",
									"    pm.expect(response.text).to.eql(\"FIREWALLS\");",
									"    pm.expect(response.node_type).to.eql(\"FDF\");",
									"    ",
									"    if (response.id) pm.environment.set(\"node_id\", response.id); ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2739a22e-a16b-4484-b8c9-1e94e9125458",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fwcloud\": {{fwcloud}}\n}"
						},
						"url": {
							"raw": "{{apiURL}}/tree/firewalls/get",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"tree",
								"firewalls",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create 5 clusters in the current fwcloud",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"if (pm.response.code === 403) {",
									"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
									"    if (fwc_confirm_token) {",
									"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
									"        postman.setNextRequest(pm.info.requestId);",
									"        return;",
									"    }",
									"}",
									"",
									"var clusters = pm.environment.get(\"clusters\");",
									"if (clusters && clusters.length>0) {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    var counter = pm.environment.get(\"counter\");",
									"    pm.test(\"Data received\", function () {",
									"        const response = pm.response.json();",
									"        pm.expect(response.insertId).to.eql(counter);",
									"        counter++;",
									"        pm.environment.set(\"counter\",counter);",
									"    });",
									"    ",
									"    pm.globals.unset(\"fwc_confirm_token\");",
									"",
									"    postman.setNextRequest(pm.info.requestId);",
									"} else {",
									"    pm.environment.unset(\"clusters\");",
									"    pm.environment.unset(\"counter\");",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
								"exec": [
									"var clusters = pm.environment.get(\"clusters\");",
									"if (!clusters) clusters = [\"\",\"Cluster-01\",\"\",\"Cluster-02\",\"\",\"Cluster-03\",\"\",\"Cluster-04\",\"\",\"Cluster-05\"];",
									"pm.environment.set(\"cluster_name\",clusters.shift());",
									"pm.environment.set(\"clusters\",clusters);",
									"",
									"var counter = pm.environment.get(\"counter\");",
									"if (!counter) {",
									"    counter = 1;",
									"    pm.environment.set(\"counter\",counter);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-FWC-Confirm-Token",
								"type": "text",
								"value": "{{fwc_confirm_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"node_id\": {{node_id}},\n    \"clusterData\": {\n        \"name\": \"{{cluster_name}}\",\n        \"options\": 3,\n        \"fwnodes\": [\n            {\n                \"name\": \"{{cluster_name}}-node1\",\n                \"comment\": null,\n                \"install_user\": null,\n                \"install_pass\": null,\n                \"save_user_pass\": 1,\n                \"install_interface\": null,\n                \"install_ipobj\": null,\n                \"fwmaster\": 1,\n                \"install_port\": 22\n            },\n            {\n                \"name\": \"{{cluster_name}}-node2\",\n                \"comment\": null,\n                \"install_user\": null,\n                \"install_pass\": null,\n                \"save_user_pass\": 1,\n                \"install_interface\": null,\n                \"install_ipobj\": null,\n                \"fwmaster\": 0,\n                \"install_port\": 22\n            },\n            {\n                \"name\": \"{{cluster_name}}-node3\",\n                \"comment\": null,\n                \"install_user\": null,\n                \"install_pass\": null,\n                \"save_user_pass\": 1,\n                \"install_interface\": null,\n                \"install_ipobj\": null,\n                \"fwmaster\": 0,\n                \"install_port\": 22\n            }\n        ]\n    }\n}"
						},
						"url": {
							"raw": "{{apiURL}}/cluster",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"cluster"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get cluster",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Data received\", function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response.id).to.eql(parseInt(pm.environment.get(\"cluster\")));",
									"    pm.expect(response.fwcloud).to.eql(parseInt(pm.environment.get(\"fwcloud\")));",
									"    pm.expect(response.name).to.eql(\"Cluster-0\"+pm.environment.get(\"cluster\"));",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2739a22e-a16b-4484-b8c9-1e94e9125458",
								"exec": [
									"pm.environment.set(\"cluster\",_.random(1, 5));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"cluster\": {{cluster}}\n}"
						},
						"url": {
							"raw": "{{apiURL}}/cluster/get",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"cluster",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all clusters of the current fwcloud",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const response = pm.response.json();",
									"if (pm.response.to.have.status(200)) {",
									"    let id = 1;",
									"    for (let cluster of response) {",
									"        //console.log(cluster);",
									"        pm.test(\"Cluster-0\"+id, function () {",
									"            //console.log(cluster);",
									"            //console.log(id);",
									"            pm.expect(cluster.id).to.eql(id);",
									"            pm.expect(cluster.fwcloud).to.eql(parseInt(pm.environment.get(\"fwcloud\")));",
									"            pm.expect(cluster.name).to.eql(\"Cluster-0\"+id);",
									"        });",
									"        id++;",
									"    }",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2739a22e-a16b-4484-b8c9-1e94e9125458",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fwcloud\": {{fwcloud}}\n}"
						},
						"url": {
							"raw": "{{apiURL}}/cluster/cloud/get",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"cluster",
								"cloud",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all clusters (fwcloud access not allowed)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error response\", function () {",
									"    const response = pm.response.json();",
									"    const err =  {",
									"        \"fwcErr\": 7000,",
									"        \"msg\": \"FWCloud access not allowed\"",
									"    }",
									"    pm.expect(response).to.eql(err);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2739a22e-a16b-4484-b8c9-1e94e9125458",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fwcloud\": 67\n}"
						},
						"url": {
							"raw": "{{apiURL}}/cluster/cloud/get",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"cluster",
								"cloud",
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update cluster",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"if (pm.response.code === 403) {",
									"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
									"    if (fwc_confirm_token) {",
									"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
									"        postman.setNextRequest(pm.info.requestId);",
									"        return;",
									"    }",
									"}",
									"",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"pm.globals.unset(\"fwc_confirm_token\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-FWC-Confirm-Token",
								"type": "text",
								"value": "{{fwc_confirm_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"clusterData\": {\n        \"cluster\": {{cluster}},\n        \"name\": \"Cluster-0{{cluster}} (WORKING)\",\n        \"options\": 3\n    }\n}"
						},
						"url": {
							"raw": "{{apiURL}}/cluster",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"cluster"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update cluster (fwcloud not exists)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"if (pm.response.code === 403) {",
									"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
									"    if (fwc_confirm_token) {",
									"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
									"        postman.setNextRequest(pm.info.requestId);",
									"        return;",
									"    }",
									"}",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error response\", function () {",
									"    const response = pm.response.json();",
									"    const err =  {",
									"        \"fwcErr\": 7000,",
									"        \"msg\": \"FWCloud access not allowed\"",
									"    }",
									"    pm.expect(response).to.eql(err);",
									"});",
									"",
									"pm.globals.unset(\"fwc_confirm_token\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-FWC-Confirm-Token",
								"type": "text",
								"value": "{{fwc_confirm_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fwcloud\": 1000,\n    \"clusterData\": {\n        \"cluster\": {{cluster}},\n        \"name\": \"Cluster-UPDATED\",\n        \"options\": 3\n    }\n}"
						},
						"url": {
							"raw": "{{apiURL}}/cluster",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"cluster"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update cluster (cluster not exists)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"if (pm.response.code === 403) {",
									"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
									"    if (fwc_confirm_token) {",
									"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
									"        postman.setNextRequest(pm.info.requestId);",
									"        return;",
									"    }",
									"}",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error response\", function () {",
									"    const response = pm.response.json();",
									"    const err =  {",
									"        \"fwcErr\": 7002,",
									"        \"msg\": \"Cluster access not allowed\"",
									"    }",
									"    pm.expect(response).to.eql(err);",
									"});",
									"",
									"pm.globals.unset(\"fwc_confirm_token\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Origin",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-FWC-Confirm-Token",
								"type": "text",
								"value": "{{fwc_confirm_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"clusterData\": {\n        \"cluster\": 1000,\n        \"name\": \"Cluster-UPDATED\",\n        \"options\": 3\n    }\n}"
						},
						"url": {
							"raw": "{{apiURL}}/cluster",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"cluster"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "IPv6",
			"item": [
				{
					"name": "FORWARD RULE",
					"item": [
						{
							"name": "Get IPv6 FORWARD rules",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f66e920-f177-4182-9a4c-c0ef058a2daf",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data received\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.length).to.eql(2);",
											"    pm.expect(response[0].special).to.eql(1);",
											"    pm.expect(response[1].special).to.eql(2);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Origin",
										"value": "{{Origin}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"firewall\": {{firewall}},\n    \"type\": 63\n}"
								},
								"url": {
									"raw": "{{apiURL}}/policy/rule/type/get",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"policy",
										"rule",
										"type",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "New rule at the begin of the policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94225473-5132-4f19-8dc8-5810e0468252",
										"exec": [
											"if (pm.response.code === 403) {",
											"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
											"    if (fwc_confirm_token) {",
											"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Data received\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(parseInt(response)).to.be.above(1);",
											"    pm.environment.set(\"rule\",response);",
											"});",
											"",
											"pm.globals.unset(\"fwc_confirm_token\");",
											"    "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": "{{Origin}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-FWC-Confirm-Token",
										"type": "text",
										"value": "{{fwc_confirm_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"firewall\": {{firewall}},\n    \"idgroup\": null,\n    \"rule_order\": 1,\n    \"action\": 2,\n    \"active\": 1,\n    \"options\": 0,\n    \"comment\": \"\",\n    \"type\": 63\n}"
								},
								"url": {
									"raw": "{{apiURL}}/policy/rule",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"policy",
										"rule"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add IPv4 address to source position (Bad object IP version)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94225473-5132-4f19-8dc8-5810e0468252",
										"exec": [
											"if (pm.response.code === 403) {",
											"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
											"    if (fwc_confirm_token) {",
											"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"}",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error response\", function () {",
											"    const response = pm.response.json();",
											"    const err =  {",
											"        \"fwcErr\": 5002,",
											"        \"msg\": \"Bad object IP version\"",
											"    }",
											"    pm.expect(response).to.eql(err);",
											"});",
											"",
											"pm.globals.unset(\"fwc_confirm_token\");",
											"    "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": "{{Origin}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-FWC-Confirm-Token",
										"type": "text",
										"value": "{{fwc_confirm_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"firewall\": {{firewall}},\n    \"rule\": {{rule}},\n    \"position\": 43,\n    \"position_order\": 1,\n    \"ipobj\": 50009,\n    \"ipobj_g\": -1,\n    \"interface\": -1\n}"
								},
								"url": {
									"raw": "{{apiURL}}/policy/ipobj",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"policy",
										"ipobj"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add IPv4 address range to source position (Bad object IP version)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94225473-5132-4f19-8dc8-5810e0468252",
										"exec": [
											"if (pm.response.code === 403) {",
											"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
											"    if (fwc_confirm_token) {",
											"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"}",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error response\", function () {",
											"    const response = pm.response.json();",
											"    const err =  {",
											"        \"fwcErr\": 5002,",
											"        \"msg\": \"Bad object IP version\"",
											"    }",
											"    pm.expect(response).to.eql(err);",
											"});",
											"",
											"pm.globals.unset(\"fwc_confirm_token\");",
											"    "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": "{{Origin}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-FWC-Confirm-Token",
										"type": "text",
										"value": "{{fwc_confirm_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"firewall\": {{firewall}},\n    \"rule\": {{rule}},\n    \"position\": 43,\n    \"position_order\": 1,\n    \"ipobj\": 60000,\n    \"ipobj_g\": -1,\n    \"interface\": -1\n}"
								},
								"url": {
									"raw": "{{apiURL}}/policy/ipobj",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"policy",
										"ipobj"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add IPv4 network to source positione (Bad object IP version)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94225473-5132-4f19-8dc8-5810e0468252",
										"exec": [
											"if (pm.response.code === 403) {",
											"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
											"    if (fwc_confirm_token) {",
											"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"}",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error response\", function () {",
											"    const response = pm.response.json();",
											"    const err =  {",
											"        \"fwcErr\": 5002,",
											"        \"msg\": \"Bad object IP version\"",
											"    }",
											"    pm.expect(response).to.eql(err);",
											"});",
											"",
											"pm.globals.unset(\"fwc_confirm_token\");",
											"    "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": "{{Origin}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-FWC-Confirm-Token",
										"type": "text",
										"value": "{{fwc_confirm_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"firewall\": {{firewall}},\n    \"rule\": {{rule}},\n    \"position\": 43,\n    \"position_order\": 1,\n    \"ipobj\": 70003,\n    \"ipobj_g\": -1,\n    \"interface\": -1\n}"
								},
								"url": {
									"raw": "{{apiURL}}/policy/ipobj",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"policy",
										"ipobj"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add IPv6 network to source position",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94225473-5132-4f19-8dc8-5810e0468252",
										"exec": [
											"if (pm.response.code === 403) {",
											"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
											"    if (fwc_confirm_token) {",
											"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data received\", function () {",
											"    const response = pm.response.json();",
											"    const data =  {",
											"        \"result\": true,",
											"     \"allowed\": 1",
											"    }",
											"    pm.expect(response).to.eql(data);",
											"});",
											"",
											"pm.globals.unset(\"fwc_confirm_token\");",
											"    "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": "{{Origin}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-FWC-Confirm-Token",
										"type": "text",
										"value": "{{fwc_confirm_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"firewall\": {{firewall}},\n    \"rule\": {{rule}},\n    \"position\": 43,\n    \"position_order\": 1,\n    \"ipobj\": 70012,\n    \"ipobj_g\": -1,\n    \"interface\": -1\n}"
								},
								"url": {
									"raw": "{{apiURL}}/policy/ipobj",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"policy",
										"ipobj"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add IPv6 network to source position (already exists)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94225473-5132-4f19-8dc8-5810e0468252",
										"exec": [
											"if (pm.response.code === 403) {",
											"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
											"    if (fwc_confirm_token) {",
											"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"}",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error response\", function () {",
											"    const response = pm.response.json();",
											"    const err =  {",
											"        \"fwcErr\": 1003,",
											"        \"msg\": \"Already exists\"",
											"    }",
											"    pm.expect(response).to.eql(err);",
											"});",
											"",
											"pm.globals.unset(\"fwc_confirm_token\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": "{{Origin}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-FWC-Confirm-Token",
										"type": "text",
										"value": "{{fwc_confirm_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"firewall\": {{firewall}},\n    \"rule\": {{rule}},\n    \"position\": 43,\n    \"position_order\": 1,\n    \"ipobj\": 70012,\n    \"ipobj_g\": -1,\n    \"interface\": -1\n}"
								},
								"url": {
									"raw": "{{apiURL}}/policy/ipobj",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"policy",
										"ipobj"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add IPv6 network to service position (not allowed)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94225473-5132-4f19-8dc8-5810e0468252",
										"exec": [
											"if (pm.response.code === 403) {",
											"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
											"    if (fwc_confirm_token) {",
											"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"}",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error response\", function () {",
											"    const response = pm.response.json();",
											"    const err =  {",
											"        \"fwcErr\": 1006,",
											"        \"msg\": \"Not allowed\"",
											"    }",
											"    pm.expect(response).to.eql(err);",
											"});",
											"",
											"pm.globals.unset(\"fwc_confirm_token\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": "{{Origin}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-FWC-Confirm-Token",
										"type": "text",
										"value": "{{fwc_confirm_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"firewall\": {{firewall}},\n    \"rule\": {{rule}},\n    \"position\": 45,\n    \"position_order\": 1,\n    \"ipobj\": 70012,\n    \"ipobj_g\": -1,\n    \"interface\": -1\n}"
								},
								"url": {
									"raw": "{{apiURL}}/policy/ipobj",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"policy",
										"ipobj"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add HTTP service to the service position",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94225473-5132-4f19-8dc8-5810e0468252",
										"exec": [
											"if (pm.response.code === 403) {",
											"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
											"    if (fwc_confirm_token) {",
											"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data received\", function () {",
											"    const response = pm.response.json();",
											"    const data =  {",
											"        \"result\": true,",
											"     \"allowed\": 1",
											"    }",
											"    pm.expect(response).to.eql(data);",
											"});",
											"",
											"pm.globals.unset(\"fwc_confirm_token\");",
											"    "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": "{{Origin}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-FWC-Confirm-Token",
										"type": "text",
										"value": "{{fwc_confirm_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"firewall\": {{firewall}},\n    \"rule\": {{rule}},\n    \"position\": 45,\n    \"position_order\": 1,\n    \"ipobj\": 20028,\n    \"ipobj_g\": -1,\n    \"interface\": -1\n}"
								},
								"url": {
									"raw": "{{apiURL}}/policy/ipobj",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"policy",
										"ipobj"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add HTTP service to the service position (already exists)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94225473-5132-4f19-8dc8-5810e0468252",
										"exec": [
											"if (pm.response.code === 403) {",
											"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
											"    if (fwc_confirm_token) {",
											"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"}",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error response\", function () {",
											"    const response = pm.response.json();",
											"    const err =  {",
											"        \"fwcErr\": 1003,",
											"        \"msg\": \"Already exists\"",
											"    }",
											"    pm.expect(response).to.eql(err);",
											"});",
											"",
											"pm.globals.unset(\"fwc_confirm_token\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": "{{Origin}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-FWC-Confirm-Token",
										"type": "text",
										"value": "{{fwc_confirm_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"firewall\": {{firewall}},\n    \"rule\": {{rule}},\n    \"position\": 45,\n    \"position_order\": 1,\n    \"ipobj\": 20028,\n    \"ipobj_g\": -1,\n    \"interface\": -1\n}"
								},
								"url": {
									"raw": "{{apiURL}}/policy/ipobj",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"policy",
										"ipobj"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add HTTP service group to the service position",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94225473-5132-4f19-8dc8-5810e0468252",
										"exec": [
											"if (pm.response.code === 403) {",
											"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
											"    if (fwc_confirm_token) {",
											"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data received\", function () {",
											"    const response = pm.response.json();",
											"    const data =  {",
											"        \"result\": true,",
											"     \"allowed\": 1",
											"    }",
											"    pm.expect(response).to.eql(data);",
											"});",
											"",
											"pm.globals.unset(\"fwc_confirm_token\");",
											"    "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": "{{Origin}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-FWC-Confirm-Token",
										"type": "text",
										"value": "{{fwc_confirm_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"firewall\": {{firewall}},\n    \"rule\": {{rule}},\n    \"position\": 45,\n    \"position_order\": 1,\n    \"ipobj\": -1,\n    \"ipobj_g\": 4,\n    \"interface\": -1\n}"
								},
								"url": {
									"raw": "{{apiURL}}/policy/ipobj",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"policy",
										"ipobj"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add HTTP service group to the service position (already exists)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94225473-5132-4f19-8dc8-5810e0468252",
										"exec": [
											"if (pm.response.code === 403) {",
											"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
											"    if (fwc_confirm_token) {",
											"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"}",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error response\", function () {",
											"    const response = pm.response.json();",
											"    const err =  {",
											"        \"fwcErr\": 1003,",
											"        \"msg\": \"Already exists\"",
											"    }",
											"    pm.expect(response).to.eql(err);",
											"});",
											"",
											"pm.globals.unset(\"fwc_confirm_token\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": "{{Origin}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-FWC-Confirm-Token",
										"type": "text",
										"value": "{{fwc_confirm_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"firewall\": {{firewall}},\n    \"rule\": {{rule}},\n    \"position\": 45,\n    \"position_order\": 1,\n    \"ipobj\": -1,\n    \"ipobj_g\": 4,\n    \"interface\": -1\n}"
								},
								"url": {
									"raw": "{{apiURL}}/policy/ipobj",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"policy",
										"ipobj"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "GROUP",
					"item": [
						{
							"name": "Don't allow mixed IPv4 and IPv6 objects",
							"item": [
								{
									"name": "Get 'GROUPS' node_id for the working fwcloud",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "94225473-5132-4f19-8dc8-5810e0468252",
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Found Groups node\", function () {",
													"    const response = pm.response.json();",
													"    let found = 0;",
													"    for(let node of response.children) {",
													"        if (node.node_type===\"OIG\" && node.text===\"Groups\") {",
													"            found=1;",
													"            pm.environment.set(\"node_id\", node.id);",
													"            break;",
													"        }",
													"    }",
													"    ",
													"    pm.expect(found).to.eql(1);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2739a22e-a16b-4484-b8c9-1e94e9125458",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Origin",
												"value": "{{Origin}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"objStandard\": 0,\n    \"objCloud\": 0\n}"
										},
										"url": {
											"raw": "{{apiURL}}/tree/objects/get",
											"host": [
												"{{apiURL}}"
											],
											"path": [
												"tree",
												"objects",
												"get"
											]
										}
									},
									"response": []
								},
								{
									"name": "New IP objects group for IPv4 objects",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9b7ea04b-dac5-452a-bd0d-ee7a986dc18a",
												"exec": [
													"if (pm.response.code === 403) {",
													"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
													"    if (fwc_confirm_token) {",
													"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Data received\", function () {",
													"    const response = pm.response.json();",
													"    pm.expect(parseInt(response.insertId)).to.be.above(99999);",
													"    pm.expect(parseInt(response.TreeinsertId)).to.be.above(1);",
													"    pm.environment.set(\"IPv4_group\",response.insertId);",
													"    pm.environment.set(\"node_id\",response.TreeinsertId);",
													"});",
													"",
													"pm.globals.unset(\"fwc_confirm_token\");",
													"    "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Origin",
												"value": "{{Origin}}"
											},
											{
												"key": "X-FWC-CONFIRM-TOKEN",
												"value": "{{fwc_confirm_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"type\": 20,\n    \"name\": \"GS1-IPv4\",\n    \"node_parent\": {{node_id}},\n    \"node_order\": 1,\n    \"node_type\": \"OIG\"\n}"
										},
										"url": {
											"raw": "{{apiURL}}/ipobj/group",
											"host": [
												"{{apiURL}}"
											],
											"path": [
												"ipobj",
												"group"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add an IPv4 network to the group",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "94225473-5132-4f19-8dc8-5810e0468252",
												"exec": [
													"if (pm.response.code === 403) {",
													"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
													"    if (fwc_confirm_token) {",
													"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Data received\", function () {",
													"    const response = pm.response.json();",
													"    pm.expect(response).to.be.an('array');",
													"});",
													"",
													"pm.globals.unset(\"fwc_confirm_token\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Origin",
												"value": "{{Origin}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-FWC-Confirm-Token",
												"type": "text",
												"value": "{{fwc_confirm_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"node_parent\": {{node_id}},\n    \"node_order\": 1,\n    \"node_type\": \"OIN\",\n    \"ipobj_g\": {{IPv4_group}},\n    \"ipobj\": 70003\n}"
										},
										"url": {
											"raw": "{{apiURL}}/ipobj/group/addto",
											"host": [
												"{{apiURL}}"
											],
											"path": [
												"ipobj",
												"group",
												"addto"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add an IPv4 address range to the group",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "94225473-5132-4f19-8dc8-5810e0468252",
												"exec": [
													"if (pm.response.code === 403) {",
													"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
													"    if (fwc_confirm_token) {",
													"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Data received\", function () {",
													"    const response = pm.response.json();",
													"    pm.expect(response).to.be.an('array');",
													"});",
													"",
													"pm.globals.unset(\"fwc_confirm_token\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Origin",
												"value": "{{Origin}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-FWC-Confirm-Token",
												"type": "text",
												"value": "{{fwc_confirm_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"node_parent\": {{node_id}},\n    \"node_order\": 1,\n    \"node_type\": \"OIN\",\n    \"ipobj_g\": {{IPv4_group}},\n    \"ipobj\": 60000\n}"
										},
										"url": {
											"raw": "{{apiURL}}/ipobj/group/addto",
											"host": [
												"{{apiURL}}"
											],
											"path": [
												"ipobj",
												"group",
												"addto"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add an IPv6 network to the group (mixed IP versions)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "94225473-5132-4f19-8dc8-5810e0468252",
												"exec": [
													"if (pm.response.code === 403) {",
													"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
													"    if (fwc_confirm_token) {",
													"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"}",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error response\", function () {",
													"    const response = pm.response.json();",
													"    const err =  {",
													"        \"fwcErr\": 5003,",
													"        \"msg\": \"Mix of different IP version objects not allowed\"",
													"    }",
													"    pm.expect(response).to.eql(err);",
													"});",
													"",
													"pm.globals.unset(\"fwc_confirm_token\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Origin",
												"value": "{{Origin}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-FWC-Confirm-Token",
												"type": "text",
												"value": "{{fwc_confirm_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"node_parent\": {{node_id}},\n    \"node_order\": 1,\n    \"node_type\": \"OIN\",\n    \"ipobj_g\": {{IPv4_group}},\n    \"ipobj\": 70012\n}"
										},
										"url": {
											"raw": "{{apiURL}}/ipobj/group/addto",
											"host": [
												"{{apiURL}}"
											],
											"path": [
												"ipobj",
												"group",
												"addto"
											]
										}
									},
									"response": []
								},
								{
									"name": "New IP objects group for IPv6 objects",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9b7ea04b-dac5-452a-bd0d-ee7a986dc18a",
												"exec": [
													"if (pm.response.code === 403) {",
													"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
													"    if (fwc_confirm_token) {",
													"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Data received\", function () {",
													"    const response = pm.response.json();",
													"    pm.expect(parseInt(response.insertId)).to.be.above(99999);",
													"    pm.expect(parseInt(response.TreeinsertId)).to.be.above(1);",
													"    pm.environment.set(\"IPv6_group\",response.insertId);",
													"    pm.environment.set(\"node_id\",response.TreeinsertId);",
													"});",
													"",
													"pm.globals.unset(\"fwc_confirm_token\");",
													"    "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Origin",
												"value": "{{Origin}}"
											},
											{
												"key": "X-FWC-CONFIRM-TOKEN",
												"value": "{{fwc_confirm_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"type\": 20,\n    \"name\": \"GS1-IPv6\",\n    \"node_parent\": {{node_id}},\n    \"node_order\": 1,\n    \"node_type\": \"OIG\"\n}"
										},
										"url": {
											"raw": "{{apiURL}}/ipobj/group",
											"host": [
												"{{apiURL}}"
											],
											"path": [
												"ipobj",
												"group"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add an IPv6 network to the group",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "94225473-5132-4f19-8dc8-5810e0468252",
												"exec": [
													"if (pm.response.code === 403) {",
													"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
													"    if (fwc_confirm_token) {",
													"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"}",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Data received\", function () {",
													"    const response = pm.response.json();",
													"    pm.expect(response).to.be.an('array');",
													"});",
													"",
													"pm.globals.unset(\"fwc_confirm_token\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Origin",
												"value": "{{Origin}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-FWC-Confirm-Token",
												"type": "text",
												"value": "{{fwc_confirm_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"node_parent\": {{node_id}},\n    \"node_order\": 1,\n    \"node_type\": \"OIN\",\n    \"ipobj_g\": {{IPv6_group}},\n    \"ipobj\": 70012\n}"
										},
										"url": {
											"raw": "{{apiURL}}/ipobj/group/addto",
											"host": [
												"{{apiURL}}"
											],
											"path": [
												"ipobj",
												"group",
												"addto"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add an IPv4 address range to the group (mixed IP versions)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "94225473-5132-4f19-8dc8-5810e0468252",
												"exec": [
													"if (pm.response.code === 403) {",
													"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
													"    if (fwc_confirm_token) {",
													"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
													"        postman.setNextRequest(pm.info.requestId);",
													"        return;",
													"    }",
													"}",
													"",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Error response\", function () {",
													"    const response = pm.response.json();",
													"    const err =  {",
													"        \"fwcErr\": 5003,",
													"        \"msg\": \"Mix of different IP version objects not allowed\"",
													"    }",
													"    pm.expect(response).to.eql(err);",
													"});",
													"",
													"pm.globals.unset(\"fwc_confirm_token\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Origin",
												"value": "{{Origin}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											},
											{
												"key": "X-FWC-Confirm-Token",
												"type": "text",
												"value": "{{fwc_confirm_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"node_parent\": {{node_id}},\n    \"node_order\": 1,\n    \"node_type\": \"OIN\",\n    \"ipobj_g\": {{IPv6_group}},\n    \"ipobj\": 60000\n}"
										},
										"url": {
											"raw": "{{apiURL}}/ipobj/group/addto",
											"host": [
												"{{apiURL}}"
											],
											"path": [
												"ipobj",
												"group",
												"addto"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "INTERFACE",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "HOST",
					"item": [],
					"_postman_isSubFolder": true
				},
				{
					"name": "RESTRICTIONS",
					"item": [],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "ACCESS CONTROL",
			"item": []
		},
		{
			"name": "RESTRICTIONS",
			"item": [
				{
					"name": "FWCloud",
					"item": [
						{
							"name": "Deletion restrictions for the working fwcloud",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94225473-5132-4f19-8dc8-5810e0468252",
										"exec": [
											"pm.test(\"Status code is 403\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(\"Restricted response\", function () {",
											"    const response = pm.response.json();",
											"    const err =  {",
											"        \"count\": {",
											"            \"CF\": 5,",
											"            \"CC\": 5,",
											"            \"CCA\": 0",
											"        }",
											"    }",
											"    pm.expect(response).to.eql(err);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Origin",
										"value": "{{Origin}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-FWC-Confirm-Token",
										"type": "text",
										"value": "{{fwc_confirm_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fwcloud\": {{fwcloud}}\n}"
								},
								"url": {
									"raw": "{{apiURL}}/fwcloud/restricted",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"fwcloud",
										"restricted"
									]
								}
							},
							"response": []
						},
						{
							"name": "Deletion restrictions (not exists)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94225473-5132-4f19-8dc8-5810e0468252",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Restricted response\", function () {",
											"    const response = pm.response.json();",
											"    const err =  {",
											"        \"fwcErr\": 7000,",
											"        \"msg\": \"FWCloud access not allowed\"",
											"    }",
											"    pm.expect(response).to.eql(err);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Origin",
										"value": "{{Origin}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-FWC-Confirm-Token",
										"type": "text",
										"value": "{{fwc_confirm_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fwcloud\": 1000\n}"
								},
								"url": {
									"raw": "{{apiURL}}/fwcloud/restricted",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"fwcloud",
										"restricted"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Group in rule can't be emptied",
					"item": [
						{
							"name": "Get 'GROUPS' node_id for the working fwcloud",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94225473-5132-4f19-8dc8-5810e0468252",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Found Groups node\", function () {",
											"    const response = pm.response.json();",
											"    let found = 0;",
											"    for(let node of response.children) {",
											"        if (node.node_type===\"OIG\" && node.text===\"Groups\") {",
											"            found=1;",
											"            pm.environment.set(\"node_id\", node.id);",
											"            break;",
											"        }",
											"    }",
											"    ",
											"    pm.expect(found).to.eql(1);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2739a22e-a16b-4484-b8c9-1e94e9125458",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Origin",
										"value": "{{Origin}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"objStandard\": 0,\n    \"objCloud\": 0\n}"
								},
								"url": {
									"raw": "{{apiURL}}/tree/objects/get",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"tree",
										"objects",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create the test group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94225473-5132-4f19-8dc8-5810e0468252",
										"exec": [
											"if (pm.response.code === 403) {",
											"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
											"    if (fwc_confirm_token) {",
											"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data received\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.insertId).to.not.be.undefined;",
											"    pm.expect(response.insertId).to.be.above(99999);",
											"    pm.expect(response.TreeinsertId).to.not.be.undefined;",
											"    pm.expect(response.TreeinsertId).to.be.above(1);",
											"    ",
											"    pm.environment.set(\"group\",response.insertId);",
											"    pm.environment.set(\"node_id\",response.TreeinsertId);",
											"});",
											"",
											"pm.globals.unset(\"fwc_confirm_token\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": "{{Origin}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-FWC-Confirm-Token",
										"type": "text",
										"value": "{{fwc_confirm_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"type\": 20,\n    \"name\": \"IP objects test group\",\n    \"node_parent\": {{node_id}},\n    \"node_order\": 1,\n    \"node_type\": \"OIG\"\n}"
								},
								"url": {
									"raw": "{{apiURL}}/ipobj/group",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"ipobj",
										"group"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add a member to the group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94225473-5132-4f19-8dc8-5810e0468252",
										"exec": [
											"if (pm.response.code === 403) {",
											"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
											"    if (fwc_confirm_token) {",
											"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data received\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.be.an('array');",
											"});",
											"",
											"pm.globals.unset(\"fwc_confirm_token\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Origin",
										"value": "{{Origin}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-FWC-Confirm-Token",
										"type": "text",
										"value": "{{fwc_confirm_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"node_parent\": {{node_id}},\n    \"node_order\": 1,\n    \"node_type\": \"OIN\",\n    \"ipobj_g\": {{group}},\n    \"ipobj\": 70003\n}"
								},
								"url": {
									"raw": "{{apiURL}}/ipobj/group/addto",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"ipobj",
										"group",
										"addto"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add another member to the group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94225473-5132-4f19-8dc8-5810e0468252",
										"exec": [
											"if (pm.response.code === 403) {",
											"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
											"    if (fwc_confirm_token) {",
											"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data received\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.be.an('array');",
											"});",
											"",
											"pm.globals.unset(\"fwc_confirm_token\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Origin",
										"value": "{{Origin}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-FWC-Confirm-Token",
										"type": "text",
										"value": "{{fwc_confirm_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"node_parent\": {{node_id}},\n    \"node_order\": 1,\n    \"node_type\": \"OIN\",\n    \"ipobj_g\": {{group}},\n    \"ipobj\": 70004\n}"
								},
								"url": {
									"raw": "{{apiURL}}/ipobj/group/addto",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"ipobj",
										"group",
										"addto"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get the forward policy for the working firewall",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94225473-5132-4f19-8dc8-5810e0468252",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data received\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.be.an('array');",
											"    pm.expect(response.length).to.be.above(1);",
											"    ",
											"    let rule = response[1];",
											"    pm.environment.set(\"rule\", rule.id);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2739a22e-a16b-4484-b8c9-1e94e9125458",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Origin",
										"value": "{{Origin}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"firewall\": {{firewall}},\n    \"type\": 3\n}"
								},
								"url": {
									"raw": "{{apiURL}}/policy/rule/type/get",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"policy",
										"rule",
										"type",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add the group to a rule of the forward policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94225473-5132-4f19-8dc8-5810e0468252",
										"exec": [
											"if (pm.response.code === 403) {",
											"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
											"    if (fwc_confirm_token) {",
											"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.globals.unset(\"fwc_confirm_token\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": "{{Origin}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-FWC-Confirm-Token",
										"type": "text",
										"value": "{{fwc_confirm_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"firewall\": {{firewall}},\n    \"rule\": {{rule}},\n    \"position\": 7,\n    \"position_order\": 1,\n    \"ipobj\": -1,\n    \"ipobj_g\": {{group}},\n    \"interface\": -1\n}"
								},
								"url": {
									"raw": "{{apiURL}}/policy/ipobj",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"policy",
										"ipobj"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove a member from the group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94225473-5132-4f19-8dc8-5810e0468252",
										"exec": [
											"if (pm.response.code === 403) {",
											"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
											"    if (fwc_confirm_token) {",
											"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data received\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.be.an('array');",
											"});",
											"",
											"pm.globals.unset(\"fwc_confirm_token\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Origin",
										"value": "{{Origin}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-FWC-Confirm-Token",
										"type": "text",
										"value": "{{fwc_confirm_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"ipobj_g\": {{group}},\n    \"ipobj\": 70004,\n    \"obj_type\": 7\n}"
								},
								"url": {
									"raw": "{{apiURL}}/ipobj/group/delfrom",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"ipobj",
										"group",
										"delfrom"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove the last member from the group (not allowed)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94225473-5132-4f19-8dc8-5810e0468252",
										"exec": [
											"if (pm.response.code === 403) {",
											"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
											"    if (fwc_confirm_token) {",
											"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"}",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error response\", function () {",
											"    const response = pm.response.json();",
											"    const err = {",
											"        \"fwcErr\": 5001,",
											"        \"msg\": \"Empty ipobj container\"",
											"    }",
											"    pm.expect(response).to.eql(err);",
											"});",
											"",
											"pm.globals.unset(\"fwc_confirm_token\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Origin",
										"value": "{{Origin}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-FWC-Confirm-Token",
										"type": "text",
										"value": "{{fwc_confirm_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"ipobj_g\": {{group}},\n    \"ipobj\": 70003,\n    \"obj_type\": 7\n}"
								},
								"url": {
									"raw": "{{apiURL}}/ipobj/group/delfrom",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"ipobj",
										"group",
										"delfrom"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove the group from the policy rule",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94225473-5132-4f19-8dc8-5810e0468252",
										"exec": [
											"if (pm.response.code === 403) {",
											"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
											"    if (fwc_confirm_token) {",
											"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.globals.unset(\"fwc_confirm_token\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Origin",
										"value": "{{Origin}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-FWC-Confirm-Token",
										"type": "text",
										"value": "{{fwc_confirm_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"firewall\": {{firewall}},\n    \"rule\": {{rule}},\n    \"position\": 7,\n    \"position_order\": 1,\n    \"ipobj\": -1,\n    \"ipobj_g\": {{group}},\n    \"interface\": -1\n}"
								},
								"url": {
									"raw": "{{apiURL}}/policy/ipobj/del",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"policy",
										"ipobj",
										"del"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove the last member from the group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94225473-5132-4f19-8dc8-5810e0468252",
										"exec": [
											"if (pm.response.code === 403) {",
											"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
											"    if (fwc_confirm_token) {",
											"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data received\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.be.an('array');",
											"});",
											"",
											"pm.globals.unset(\"fwc_confirm_token\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Origin",
										"value": "{{Origin}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-FWC-Confirm-Token",
										"type": "text",
										"value": "{{fwc_confirm_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"ipobj_g\": {{group}},\n    \"ipobj\": 70003,\n    \"obj_type\": 7\n}"
								},
								"url": {
									"raw": "{{apiURL}}/ipobj/group/delfrom",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"ipobj",
										"group",
										"delfrom"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete the test group",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94225473-5132-4f19-8dc8-5810e0468252",
										"exec": [
											"if (pm.response.code === 403) {",
											"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
											"    if (fwc_confirm_token) {",
											"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"}",
											"",
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"",
											"    pm.environment.unset(\"rule\");",
											"    pm.environment.unset(\"group\");",
											"    pm.environment.unset(\"node_id\");",
											"});",
											"",
											"",
											"pm.globals.unset(\"fwc_confirm_token\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Origin",
										"value": "{{Origin}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-FWC-Confirm-Token",
										"type": "text",
										"value": "{{fwc_confirm_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"id\": {{group}},\n    \"type\": 20\n}"
								},
								"url": {
									"raw": "{{apiURL}}/ipobj/group/del",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"ipobj",
										"group",
										"del"
									]
								}
							},
							"response": []
						}
					],
					"description": "One important restriction in FWCloud.net is that we cant not leave empty an object container used in a rule because this may provocate, for example, that we create a rule that allows traffic from any source address because the group used in the source position of the rule is empty.",
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "DUPLICITY",
			"item": [
				{
					"name": "IP Address",
					"item": [
						{
							"name": "Get ipobj 'Addresses' node_id for the working fwcloud",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94225473-5132-4f19-8dc8-5810e0468252",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data received\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.children).to.not.be.undefined;",
											"    pm.expect(response.children).to.be.an('array');",
											"    ",
											"    for (let node of response.children) {",
											"        if (node.node_type===\"OIA\") {",
											"            pm.expect(node.text).to.eql(\"Addresses\");",
											"            pm.expect(node.fwcloud).to.eql(parseInt(pm.environment.get(\"fwcloud\")));",
											"            pm.expect(node.obj_type).to.eql(5);",
											"            pm.expect(node.id_obj).to.be.null;",
											"            pm.environment.set(\"node_id\", node.id); ",
											"            break;",
											"        }",
											"    }",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2739a22e-a16b-4484-b8c9-1e94e9125458",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Origin",
										"value": "{{Origin}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"objStandard\": 0,\n    \"objCloud\": 0\n}"
								},
								"url": {
									"raw": "{{apiURL}}/tree/objects/get",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"tree",
										"objects",
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create the test IP address",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94225473-5132-4f19-8dc8-5810e0468252",
										"exec": [
											"if (pm.response.code === 403) {",
											"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
											"    if (fwc_confirm_token) {",
											"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data received\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.insertId).to.not.be.undefined;",
											"    pm.expect(response.insertId).to.be.above(99999);",
											"    pm.expect(response.TreeinsertId).to.not.be.undefined;",
											"    pm.expect(response.TreeinsertId).to.be.above(1);",
											"    ",
											"    pm.environment.set(\"ipobj\",response.insertId);",
											"});",
											"",
											"pm.globals.unset(\"fwc_confirm_token\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": "{{Origin}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-FWC-Confirm-Token",
										"type": "text",
										"value": "{{fwc_confirm_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"type\": 5,\n    \"name\": \"Test IP 1\",\n    \"address\": \"1.2.3.4\",\n    \"netmask\": \"255.255.255.0\",\n    \"ip_version\": 4,\n    \"node_parent\": {{node_id}},\n    \"node_order\": 1,\n    \"node_type\": \"OIA\"\n}"
								},
								"url": {
									"raw": "{{apiURL}}/ipobj",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"ipobj"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create the same test IP address (already exists)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94225473-5132-4f19-8dc8-5810e0468252",
										"exec": [
											"if (pm.response.code === 403) {",
											"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
											"    if (fwc_confirm_token) {",
											"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"}",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error response\", function () {",
											"    const response = pm.response.json();",
											"    const err =  {",
											"        \"fwcErr\": 1003,",
											"        \"msg\": \"Already exists\"",
											"    }",
											"    pm.expect(response).to.eql(err);",
											"});",
											"",
											"pm.globals.unset(\"fwc_confirm_token\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": "{{Origin}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-FWC-Confirm-Token",
										"type": "text",
										"value": "{{fwc_confirm_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"type\": 5,\n    \"name\": \"Test IP 1\",\n    \"address\": \"1.2.3.4\",\n    \"netmask\": \"255.255.255.0\",\n    \"ip_version\": 4,\n    \"node_parent\": {{node_id}},\n    \"node_order\": 1,\n    \"node_type\": \"OIA\"\n}"
								},
								"url": {
									"raw": "{{apiURL}}/ipobj",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"ipobj"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create the same test IP address but with CIDR notation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94225473-5132-4f19-8dc8-5810e0468252",
										"exec": [
											"if (pm.response.code === 403) {",
											"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
											"    if (fwc_confirm_token) {",
											"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"}",
											"",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Error response\", function () {",
											"    const response = pm.response.json();",
											"    const err =  {",
											"        \"fwcErr\": 1003,",
											"        \"msg\": \"Already exists\"",
											"    }",
											"    pm.expect(response).to.eql(err);",
											"});",
											"",
											"pm.globals.unset(\"fwc_confirm_token\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": "{{Origin}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-FWC-Confirm-Token",
										"type": "text",
										"value": "{{fwc_confirm_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"type\": 5,\n    \"name\": \"Test IP 1\",\n    \"address\": \"1.2.3.4\",\n    \"netmask\": \"/24\",\n    \"ip_version\": 4,\n    \"node_parent\": {{node_id}},\n    \"node_order\": 1,\n    \"node_type\": \"OIA\"\n}"
								},
								"url": {
									"raw": "{{apiURL}}/ipobj",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"ipobj"
									]
								}
							},
							"response": []
						},
						{
							"name": "Force creation of the same test IP address",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94225473-5132-4f19-8dc8-5810e0468252",
										"exec": [
											"if (pm.response.code === 403) {",
											"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
											"    if (fwc_confirm_token) {",
											"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data received\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.insertId).to.not.be.undefined;",
											"    pm.expect(response.insertId).to.be.above(99999);",
											"    pm.expect(response.TreeinsertId).to.not.be.undefined;",
											"    pm.expect(response.TreeinsertId).to.be.above(1);",
											"    ",
											"    pm.environment.set(\"ipobj2\",response.insertId);",
											"});",
											"",
											"pm.globals.unset(\"fwc_confirm_token\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": "{{Origin}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-FWC-Confirm-Token",
										"type": "text",
										"value": "{{fwc_confirm_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"type\": 5,\n    \"name\": \"Test IP 1\",\n    \"address\": \"1.2.3.4\",\n    \"netmask\": \"255.255.255.0\",\n    \"ip_version\": 4,\n    \"node_parent\": {{node_id}},\n    \"node_order\": 1,\n    \"node_type\": \"OIA\",\n    \"force\": 1\n}"
								},
								"url": {
									"raw": "{{apiURL}}/ipobj",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"ipobj"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete test IP address",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94225473-5132-4f19-8dc8-5810e0468252",
										"exec": [
											"if (pm.response.code === 403) {",
											"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
											"    if (fwc_confirm_token) {",
											"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data received\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.be.an('array');",
											"    ",
											"   ",
											"    pm.environment.unset(\"ipobj\");",
											"});",
											"",
											"pm.globals.unset(\"fwc_confirm_token\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Origin",
										"value": "{{Origin}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-FWC-Confirm-Token",
										"type": "text",
										"value": "{{fwc_confirm_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"id\": {{ipobj}},\n    \"type\": 5\n}"
								},
								"url": {
									"raw": "{{apiURL}}/ipobj/del",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"ipobj",
										"del"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete the same test IP address",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94225473-5132-4f19-8dc8-5810e0468252",
										"exec": [
											"if (pm.response.code === 403) {",
											"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
											"    if (fwc_confirm_token) {",
											"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
											"        postman.setNextRequest(pm.info.requestId);",
											"        return;",
											"    }",
											"}",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Data received\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response).to.be.an('array');",
											"    ",
											"    pm.environment.unset(\"ipobj2\");",
											"});",
											"",
											"pm.globals.unset(\"fwc_confirm_token\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "83836b94-23b6-42b4-b4c2-8e8246a4f850",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Origin",
										"value": "{{Origin}}"
									},
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "X-FWC-Confirm-Token",
										"type": "text",
										"value": "{{fwc_confirm_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"fwcloud\": {{fwcloud}},\n    \"id\": {{ipobj2}},\n    \"type\": 5\n}"
								},
								"url": {
									"raw": "{{apiURL}}/ipobj/del",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"ipobj",
										"del"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "INPUT VALIDATION",
			"item": [
				{
					"name": "User",
					"item": [
						{
							"name": "Customer must be a number",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94225473-5132-4f19-8dc8-5810e0468252",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test(\"Joi validation error\", function () {",
											"    pm.expect(response.isJoi).to.be.true;",
											"});",
											"",
											"pm.test(\"Error message\", function () {",
											"    pm.expect(response.details[0].message).to.eql(\"\\\"customer\\\" must be a number\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": "{{Origin}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"customer\": \"badCustomer\",\n    \"username\": \"fwcadmin\",\n    \"password\": \"fwcadmin\"\n}"
								},
								"url": {
									"raw": "{{apiURL}}/user/login",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Customer must be integer greater than 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94225473-5132-4f19-8dc8-5810e0468252",
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"const response = pm.response.json();",
											"",
											"pm.test(\"Joi validation error\", function () {",
											"    pm.expect(response.isJoi).to.be.true;",
											"});",
											"",
											"pm.test(\"Error message\", function () {",
											"    pm.expect(response.details[0].message).to.eql(\"\\\"customer\\\" must be larger than or equal to 1\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Origin",
										"value": "{{Origin}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"customer\": 0,\n    \"username\": \"fwcadmin\",\n    \"password\": \"fwcadmin\"\n}"
								},
								"url": {
									"raw": "{{apiURL}}/user/login",
									"host": [
										"{{apiURL}}"
									],
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Logout",
			"item": [
				{
					"name": "Logout ok",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"if (pm.response.code === 403) {",
									"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
									"    if (fwc_confirm_token) {",
									"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
									"        postman.setNextRequest(pm.info.requestId);",
									"        return;",
									"    }",
									"}",
									"",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Origin",
								"type": "text",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-FWC-Confirm-token",
								"value": "{{fwc_confirm_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{apiURL}}/user/logout",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"user",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout (invalid session)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94225473-5132-4f19-8dc8-5810e0468252",
								"exec": [
									"if (pm.response.code === 403) {",
									"    const fwc_confirm_token = pm.response.json().fwc_confirm_token;",
									"    if (fwc_confirm_token) {",
									"        pm.globals.set(\"fwc_confirm_token\", fwc_confirm_token);",
									"        postman.setNextRequest(pm.info.requestId);",
									"        return;",
									"    }",
									"}",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error response\", function () {",
									"    const response = pm.response.json();",
									"    const err = {",
									"        \"fwcErr\": 1010,",
									"        \"msg\": \"Invalid session\"",
									"    }",
									"    pm.expect(response).to.eql(err);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Origin",
								"type": "text",
								"value": "{{Origin}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-FWC-Confirm-token",
								"type": "text",
								"value": "{{fwc_confirm_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{apiURL}}/user/logout",
							"host": [
								"{{apiURL}}"
							],
							"path": [
								"user",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "cad3f418-582c-495b-8698-68019a787ecd",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "5eda15be-7302-4296-bc71-8fc00c7dd27f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "a751140e-e6a2-47bc-8d6c-368e31efeeea",
			"key": "apiURL",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"id": "e7caf2c3-a89c-428b-8fcd-4e0926528573",
			"key": "Origin",
			"value": "http://webtest.fwcloud.net",
			"type": "string"
		}
	]
}